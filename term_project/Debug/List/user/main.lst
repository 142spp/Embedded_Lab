###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         20/Dec/2022  11:50:04
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\code\Embedded_Lab\term_project\user\main.c
#    Command line                 =
#        -f C:\code\Embedded_Lab\term_project\Debug\Obj\user\main.o.rsp
#        (C:\code\Embedded_Lab\term_project\user\main.c -D USE_STDPERIPH_DRIVER
#        -D STM32F10X_CL -lC C:\code\Embedded_Lab\term_project\Debug\List\user
#        -o C:\code\Embedded_Lab\term_project\Debug\Obj\user --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\ -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\code\Embedded_Lab\term_project\libraries\LCD\ -I
#        C:\code\Embedded_Lab\term_project\libraries\MODULES\ -I
#        C:\code\Embedded_Lab\term_project\user\ -I
#        C:\code\Embedded_Lab\term_project\user\inc\ -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\code\Embedded_Lab\term_project\Debug\Obj\user\main.o.d
#    Locale                       =  C
#    List file                    =
#        C:\code\Embedded_Lab\term_project\Debug\List\user\main.lst
#    Object file                  =
#        C:\code\Embedded_Lab\term_project\Debug\Obj\user\main.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#      __size_limit               =  32768|ARM.EW.LINKER
#
###############################################################################

C:\code\Embedded_Lab\term_project\user\main.c
      1          // Standard
      2          #include <stdio.h>
      3          #include <stdlib.h>
      4          
      5          // System
      6          #include "misc.h"
      7          #include "stm32f10x.h"
      8          #include "stm32f10x_adc.h"
      9          #include "stm32f10x_dma.h"
     10          #include "stm32f10x_gpio.h"
     11          #include "stm32f10x_rcc.h"
     12          #include "stm32f10x_tim.h"
     13          
     14          // Modules 
     15          #include "servo.h"
     16          #include "uart.h"
     17          #include "ultra.h"
     18          #include "pir.h"
     19          #include "dcmotor.h"
     20          #include "pwm.h"
     21          
     22          enum { OFF = 0, ON = 1 } ; 
     23          enum { LEFT = 0, MID = 1, RIGHT = 2 } ;
     24          
     25          /* function prototype */
     26          void Delay(uint16_t);
     27          void RCC_Configure(void);
     28          void GPIO_Configure(void);
     29          void ADC_Configure(void);
     30          void DMA_Configure(void);
     31          void TIM_Configure(void);
     32          void EXTI_Configure(void);
     33          void NVIC_Configure(void);
     34          void Init_Configure(void);
     35          
     36          /**
     37           * @brief Enable or Disable Clocks Using
     38           *      RCC_APB1PeriphClockCmd , RCC_APB2PeriphClockCmd, RCC_AHBPeriphClockCmd
     39           *      함수의 definition의 주석을 참고해서 원하는 모듈에 clock을 인가한다.
     40           */

   \                                 In section .text, align 2, keep-with-next
     41          void RCC_Configure(void) {
     42              //RCC_APB1PeriphClockCmd(); 
     43              //RCC_APB2PeriphClockCmd(); 
     44              //RCC_AHBPeriphClockCmd();
     45          }
   \                     RCC_Configure: (+1)
   \        0x0   0x4770             BX       LR
     46          
     47          
     48          /**
     49           * @brief Enable GPIO Pins using GPIO_InitTypeDef
     50           */

   \                                 In section .text, align 2, keep-with-next
     51          void GPIO_Configure(void) {
     52              //GPIO_InitTypeDef GPIO_InitStruct;
     53          }
   \                     GPIO_Configure: (+1)
   \        0x0   0x4770             BX       LR
     54          
     55          /**
     56           * @brief ADC Configure using ADC_InitTypeDef
     57           */

   \                                 In section .text, align 2, keep-with-next
     58          void ADC_Configure(void) {
     59              //ADC_InitTypeDef ADC_InitStruct;
     60          }
   \                     ADC_Configure: (+1)
   \        0x0   0x4770             BX       LR
     61          
     62          /**
     63           * @brief DMA Configure using DMA_InitTypeDef
     64           */

   \                                 In section .text, align 2, keep-with-next
     65          void DMA_Configure(void) {
     66              //DMA_InitTypeDef DMA_InitStruct;
     67          }
   \                     DMA_Configure: (+1)
   \        0x0   0x4770             BX       LR
     68          
     69          /**
     70           * @brief excute All configuration function
     71           */

   \                                 In section .text, align 2, keep-with-next
     72          void Init_Configure(void) {
   \                     Init_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     73              //Init System
     74              SystemInit();
   \        0x2   0x.... 0x....      BL       SystemInit
     75              //RCC_Configure();
     76              //GPIO_Configure();
     77              //ADC_Configure();
     78              //TIM_Configure();
     79              //EXTI_Configure();
     80              //NVIC_Configure();
     81              //DMA_Configure();
     82          
     83              //Init Modules
     84              Servo_Init();
   \        0x6   0x.... 0x....      BL       Servo_Init
     85              //PIR_Init();
     86              Ultra_Init();
   \        0xA   0x.... 0x....      BL       Ultra_Init
     87              //Dist_Init();
     88              DC_Motor_Init();
   \        0xE   0x.... 0x....      BL       DC_Motor_Init
     89              //Gesture_Init();
     90          }
   \       0x12   0xBD01             POP      {R0,PC}
     91          
     92          /**
     93           * @brief Delay around 0.1 * t sec
     94           */

   \                                 In section .text, align 2, keep-with-next
     95          void Delay(uint16_t t) {
     96              for (uint32_t j = 0; j < t; j++)
   \                     Delay: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0xE004             B.N      ??Delay_0
     97                  for (uint32_t i = 0; i < 1000000; i++) ;
   \                     ??Delay_1: (+1)
   \        0x4   0x1C52             ADDS     R2,R2,#+1
   \                     ??Delay_2: (+1)
   \        0x6   0x....             LDR.N    R3,??DataTable1
   \        0x8   0x429A             CMP      R2,R3
   \        0xA   0xD3FB             BCC.N    ??Delay_1
   \        0xC   0x1C49             ADDS     R1,R1,#+1
   \                     ??Delay_0: (+1)
   \        0xE   0x0002             MOVS     R2,R0
   \       0x10   0xB292             UXTH     R2,R2
   \       0x12   0x4291             CMP      R1,R2
   \       0x14   0xD201             BCS.N    ??Delay_3
   \       0x16   0x2200             MOVS     R2,#+0
   \       0x18   0xE7F5             B.N      ??Delay_2
     98          }
   \                     ??Delay_3: (+1)
   \       0x1A   0x4770             BX       LR
     99          

   \                                 In section .text, align 2, keep-with-next
    100          int main(void) {
   \                     main: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    101          
    102              Init_Configure();
   \        0x2   0x.... 0x....      BL       Init_Configure
    103          
    104              uint16_t state = STATE_OFF;
   \        0x6   0xF44F 0x5080      MOV      R0,#+4096
    105          
    106              uint16_t position = MID;
   \        0xA   0x2001             MOVS     R0,#+1
    107              uint16_t angle;
    108              uint16_t pre_angle;
    109          
    110              uint32_t distance = 0;
   \        0xC   0x2400             MOVS     R4,#+0
    111              uint16_t interval = 10;
   \        0xE   0x250A             MOVS     R5,#+10
    112              uint32_t speed = 0;
   \       0x10   0x2000             MOVS     R0,#+0
    113              
    114              while(1){	
    115          		DC_Motor_Speed(distance);
   \                     ??main_0: (+1)
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       DC_Motor_Speed
    116          		distance += interval;
   \       0x18   0x0028             MOVS     R0,R5
   \       0x1A   0xB280             UXTH     R0,R0
   \       0x1C   0x1904             ADDS     R4,R0,R4
    117                          if (distance > 200) distance = 0;
   \       0x1E   0x2CC9             CMP      R4,#+201
   \       0x20   0xD300             BCC.N    ??main_1
   \       0x22   0x2400             MOVS     R4,#+0
    118                  // state = UART_GetState();
    119                  // // use PIR Sensor
    120                  // if(state && STATE_OFF || PIR_Get_Exist() == false ) {
    121                  //     Delay(2);
    122                  //     continue;
    123                  // }
    124                  // // use Ultrasound Sensor
    125                  // angle = Usound_Get_Angle();
    126          
    127                  // if(pre_angle != angle){
    128                  //     // use Servo Motor
    129                  //     Servo_Turn(angle);
    130                  //     Delay(20);
    131                  // }
    132                  // // use Distance Sensor
    133                  // distance = Dist_Get_Distance();
    134                  // // use DC Motor
    135                  // DC_Update(distance);
    136          
    137                  // pre_angle = angle;
    138                  Delay(2);
   \                     ??main_1: (+1)
   \       0x24   0x2002             MOVS     R0,#+2
   \       0x26   0x.... 0x....      BL       Delay
   \       0x2A   0xE7F2             B.N      ??main_0
    139              }
    140              return 0;
                     ^
Warning[Pe111]: statement is unreachable

      uint16_t state = STATE_OFF;
               ^
"C:\code\Embedded_Lab\term_project\user\main.c",104  Warning[Pe177]: variable
          "state" was declared but never referenced

      uint16_t position = MID;
               ^
"C:\code\Embedded_Lab\term_project\user\main.c",106  Warning[Pe177]: variable
          "position" was declared but never referenced

      uint16_t angle;
               ^
"C:\code\Embedded_Lab\term_project\user\main.c",107  Warning[Pe177]: variable
          "angle" was declared but never referenced

      uint16_t pre_angle;
               ^
"C:\code\Embedded_Lab\term_project\user\main.c",108  Warning[Pe177]: variable
          "pre_angle" was declared but never referenced

      uint32_t speed = 0;
               ^
"C:\code\Embedded_Lab\term_project\user\main.c",112  Warning[Pe177]: variable
          "speed" was declared but never referenced
    141          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x000F'4240        DC32     0xf4240

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ADC_Configure
       0   DMA_Configure
       0   Delay
       0   GPIO_Configure
       8   Init_Configure
         8   -> DC_Motor_Init
         8   -> Servo_Init
         8   -> SystemInit
         8   -> Ultra_Init
       0   RCC_Configure
      16   main
        16   -> DC_Motor_Speed
        16   -> Delay
        16   -> Init_Configure


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       2  ADC_Configure
       2  DMA_Configure
      28  Delay
       2  GPIO_Configure
      20  Init_Configure
       2  RCC_Configure
      44  main

 
 104 bytes in section .text
 
 104 bytes of CODE memory

Errors: none
Warnings: 6

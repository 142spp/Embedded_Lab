###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         21/Dec/2022  02:13:42
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\code\Embedded_Lab\term_project\user\main.c
#    Command line                 =
#        -f C:\code\Embedded_Lab\term_project\Debug\Obj\user\main.o.rsp
#        (C:\code\Embedded_Lab\term_project\user\main.c -D USE_STDPERIPH_DRIVER
#        -D STM32F10X_CL -lC C:\code\Embedded_Lab\term_project\Debug\List\user
#        -o C:\code\Embedded_Lab\term_project\Debug\Obj\user --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\ -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\code\Embedded_Lab\term_project\libraries\LCD\ -I
#        C:\code\Embedded_Lab\term_project\libraries\MODULES\ -I
#        C:\code\Embedded_Lab\term_project\user\ -I
#        C:\code\Embedded_Lab\term_project\user\inc\ -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\code\Embedded_Lab\term_project\Debug\Obj\user\main.o.d
#    Locale                       =  C
#    List file                    =
#        C:\code\Embedded_Lab\term_project\Debug\List\user\main.lst
#    Object file                  =
#        C:\code\Embedded_Lab\term_project\Debug\Obj\user\main.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#      __size_limit               =  32768|ARM.EW.LINKER
#
###############################################################################

C:\code\Embedded_Lab\term_project\user\main.c
      1          // Standard
      2          #include <stdio.h>
      3          #include <stdlib.h>
      4          
      5          // System
      6          #include "misc.h"
      7          #include "stm32f10x.h"
      8          #include "stm32f10x_adc.h"
      9          #include "stm32f10x_dma.h"
     10          #include "stm32f10x_gpio.h"
     11          #include "stm32f10x_rcc.h"
     12          #include "stm32f10x_tim.h"
     13          
     14          // Modules
     15          #include "dcmotor.h"
     16          #include "dist.h"
     17          #include "pir.h"
     18          #include "servo.h"
     19          #include "uart.h"
     20          #include "ultra.h"
     21          #include "handler.h"
     22          
     23          /* function prototype */
     24          void Delay(uint16_t);
     25          void RCC_Configure(void);
     26          void GPIO_Configure(void);
     27          void ADC_Configure(void);
     28          void DMA_Configure(void);
     29          void TIM_Configure(void);
     30          void EXTI_Configure(void);
     31          void NVIC_Configure(void);
     32          void Init_Configure(void);
     33          
     34          /**
     35           * @brief Enable or Disable Clocks Using
     36           *      RCC_APB1PeriphClockCmd , RCC_APB2PeriphClockCmd, RCC_AHBPeriphClockCmd
     37           *      함수의 definition의 주석을 참고해서 원하는 모듈에 clock을 인가한다.
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          void RCC_Configure(void) {
     40              // RCC_APB1PeriphClockCmd();
     41              // RCC_APB2PeriphClockCmd();
     42              // RCC_AHBPeriphClockCmd();
     43          }
   \                     RCC_Configure: (+1)
   \        0x0   0x4770             BX       LR
     44          
     45          /**
     46           * @brief Enable GPIO Pins using GPIO_InitTypeDef
     47           */

   \                                 In section .text, align 2, keep-with-next
     48          void GPIO_Configure(void) {
     49              // GPIO_InitTypeDef GPIO_InitStruct;
     50          }
   \                     GPIO_Configure: (+1)
   \        0x0   0x4770             BX       LR
     51          
     52          /**
     53           * @brief ADC Configure using ADC_InitTypeDef
     54           */

   \                                 In section .text, align 2, keep-with-next
     55          void ADC_Configure(void) {
     56              // ADC_InitTypeDef ADC_InitStruct;
     57          }
   \                     ADC_Configure: (+1)
   \        0x0   0x4770             BX       LR
     58          /**
     59           * @brief TIM Configure using TIM_TimeBaseInitTypeDef, TIM_ICTypedef
     60           */

   \                                 In section .text, align 2, keep-with-next
     61          void TIM_Configure(void) {
     62              // TIM_TimeBaseInitTypeDef TIM_InitStruct;
     63          }
   \                     TIM_Configure: (+1)
   \        0x0   0x4770             BX       LR
     64          /**
     65           * @brief EXTI Configure using EXTI_InitTypeDef
     66           */

   \                                 In section .text, align 2, keep-with-next
     67          void EXTI_Configure(void) {
     68              // EXTI_InitTypeDef EXTI_InitStruct;
     69          }
   \                     EXTI_Configure: (+1)
   \        0x0   0x4770             BX       LR
     70          /**
     71           * @brief NVIC Configure using NVIC_InitTypeDef
     72           */

   \                                 In section .text, align 2, keep-with-next
     73          void NVIC_Configure(void) {    
   \                     NVIC_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     74              NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   \        0x2   0xF44F 0x60A0      MOV      R0,#+1280
   \        0x6   0x.... 0x....      BL       NVIC_PriorityGroupConfig
     75              // NVIC_InitTypeDef NVIC_InitStruct;
     76          }
   \        0xA   0xBD01             POP      {R0,PC}
     77          /**
     78           * @brief DMA Configure using DMA_InitTypeDef
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          void DMA_Configure(void) {
     81              // DMA_InitTypeDef DMA_InitStruct;
     82          }
   \                     DMA_Configure: (+1)
   \        0x0   0x4770             BX       LR
     83          
     84          /**
     85           * @brief excute All configuration function
     86           */

   \                                 In section .text, align 2, keep-with-next
     87          void Init_Configure(void) {
   \                     Init_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     88              // Init System
     89              SystemInit();
   \        0x2   0x.... 0x....      BL       SystemInit
     90              RCC_Configure();
   \        0x6   0x.... 0x....      BL       RCC_Configure
     91              GPIO_Configure();
   \        0xA   0x.... 0x....      BL       GPIO_Configure
     92              ADC_Configure();
   \        0xE   0x.... 0x....      BL       ADC_Configure
     93              TIM_Configure();
   \       0x12   0x.... 0x....      BL       TIM_Configure
     94              EXTI_Configure();
   \       0x16   0x.... 0x....      BL       EXTI_Configure
     95              NVIC_Configure();
   \       0x1A   0x.... 0x....      BL       NVIC_Configure
     96              DMA_Configure();
   \       0x1E   0x.... 0x....      BL       DMA_Configure
     97          
     98              // Init Modules
     99              DC_Motor_Init();
   \       0x22   0x.... 0x....      BL       DC_Motor_Init
    100              Dist_Init();
   \       0x26   0x.... 0x....      BL       Dist_Init
    101              PIR_Init();
   \       0x2A   0x.... 0x....      BL       PIR_Init
    102              Servo_Init();
   \       0x2E   0x.... 0x....      BL       Servo_Init
    103              UART_Init();
   \       0x32   0x.... 0x....      BL       UART_Init
    104              Ultra_Init();
   \       0x36   0x.... 0x....      BL       Ultra_Init
    105          }
   \       0x3A   0xBD01             POP      {R0,PC}
    106          
    107          /**
    108           * @brief Delay around 0.1 * t sec
    109           */

   \                                 In section .text, align 2, keep-with-next
    110          void Delay(uint16_t t) {
    111              for (uint32_t j = 0; j < t; j++)
   \                     Delay: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0xE004             B.N      ??Delay_0
    112                  for (uint32_t i = 0; i < 1000000; i++)
   \                     ??Delay_1: (+1)
   \        0x4   0x1C52             ADDS     R2,R2,#+1
   \                     ??Delay_2: (+1)
   \        0x6   0x....             LDR.N    R3,??DataTable1
   \        0x8   0x429A             CMP      R2,R3
   \        0xA   0xD3FB             BCC.N    ??Delay_1
   \        0xC   0x1C49             ADDS     R1,R1,#+1
   \                     ??Delay_0: (+1)
   \        0xE   0x0002             MOVS     R2,R0
   \       0x10   0xB292             UXTH     R2,R2
   \       0x12   0x4291             CMP      R1,R2
   \       0x14   0xD201             BCS.N    ??Delay_3
   \       0x16   0x2200             MOVS     R2,#+0
   \       0x18   0xE7F5             B.N      ??Delay_2
    113                      ;
    114          }
   \                     ??Delay_3: (+1)
   \       0x1A   0x4770             BX       LR
    115          

   \                                 In section .text, align 2, keep-with-next
    116          int main(void) {
   \                     main: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    117              Init_Configure();
   \        0x2   0x.... 0x....      BL       Init_Configure
    118          
    119              UARTState state;
    120          
    121              uint8_t exist = 0;
   \        0x6   0x2000             MOVS     R0,#+0
    122              uint16_t position = MID;
   \        0x8   0x255A             MOVS     R5,#+90
    123              uint16_t pre_pos = position;
   \        0xA   0x002C             MOVS     R4,R5
    124          
    125              uint32_t distance = 100;
   \        0xC   0x2064             MOVS     R0,#+100
   \        0xE   0xE002             B.N      ??main_0
    126          
    127              while (1) {
    128                  // UART use PA2, PA3, 5v, gnd
    129                  state = UART_GetState();
    130                  if (state.power == OFF) {
    131                      Delay(2);
   \                     ??main_1: (+1)
   \       0x10   0x2002             MOVS     R0,#+2
   \       0x12   0x.... 0x....      BL       Delay
    132                      continue;
    133                  }
   \                     ??main_0: (+1)
   \       0x16   0x.... 0x....      BL       UART_GetState
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD0F5             BEQ.N    ??main_1
    134          
    135                  if (state.mode == MAN) {  // Manual
   \       0x24   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD10C             BNE.N    ??main_2
    136                      if (pre_pos != state.position) {
   \       0x2C   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \       0x30   0xB2A4             UXTH     R4,R4
   \       0x32   0xB280             UXTH     R0,R0
   \       0x34   0x4284             CMP      R4,R0
   \       0x36   0xD001             BEQ.N    ??main_3
    137                          position = state.position;  // position update
   \       0x38   0xF89D 0x5002      LDRB     R5,[SP, #+2]
    138                      }
    139                      // DC motor use PB6, 3.3v, gnd, battery
    140                      DC_Motor_UpdateMAN(state.strength);  // strength update
   \                     ??main_3: (+1)
   \       0x3C   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \       0x40   0x.... 0x....      BL       DC_Motor_UpdateMAN
   \       0x44   0xE046             B.N      ??main_4
    141                  }
    142          
    143                  else if (state.mode == AUTO) {
   \                     ??main_2: (+1)
   \       0x46   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x4A   0x2801             CMP      R0,#+1
   \       0x4C   0xD142             BNE.N    ??main_4
    144                      // PIR use PC6, PC8, 5V*2, GND*2
    145                      exist = PIR_Get_Exist();
   \       0x4E   0x.... 0x....      BL       PIR_Get_Exist
   \       0x52   0x0006             MOVS     R6,R0
    146                      if (exist == 0) {
   \       0x54   0x0030             MOVS     R0,R6
   \       0x56   0xB2C0             UXTB     R0,R0
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD103             BNE.N    ??main_5
    147                          Delay(2);
   \       0x5C   0x2002             MOVS     R0,#+2
   \       0x5E   0x.... 0x....      BL       Delay
    148                          continue;
   \       0x62   0xE7D8             B.N      ??main_0
    149                      }
    150          
    151                      uint8_t l_exist = exist / 10;
   \                     ??main_5: (+1)
   \       0x64   0x0030             MOVS     R0,R6
   \       0x66   0xB2C0             UXTB     R0,R0
   \       0x68   0x210A             MOVS     R1,#+10
   \       0x6A   0xFB90 0xF5F1      SDIV     R5,R0,R1
    152                      uint8_t r_exist = exist % 10;
   \       0x6E   0xB2F6             UXTB     R6,R6
   \       0x70   0x200A             MOVS     R0,#+10
   \       0x72   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \       0x76   0xFB00 0x6611      MLS      R6,R0,R1,R6
    153          
    154                      // Ultrasound use A6, A7
    155                      distance = Ultra_Measure_Distance();
   \       0x7A   0x.... 0x....      BL       Ultra_Measure_Distance
   \       0x7E   0x0007             MOVS     R7,R0
    156          
    157                      if (l_exist == r_exist) {
   \       0x80   0x0028             MOVS     R0,R5
   \       0x82   0xB2C0             UXTB     R0,R0
   \       0x84   0xB2F6             UXTB     R6,R6
   \       0x86   0x42B0             CMP      R0,R6
   \       0x88   0xD104             BNE.N    ??main_6
    158                          position = MID;
   \       0x8A   0x255A             MOVS     R5,#+90
    159                          // Dist use PB0
    160                          distance = Dist_Get_Distance();
   \       0x8C   0x.... 0x....      BL       Dist_Get_Distance
   \       0x90   0x0007             MOVS     R7,R0
   \       0x92   0xE00D             B.N      ??main_7
    161                      } else if (l_exist) {
   \                     ??main_6: (+1)
   \       0x94   0xB2ED             UXTB     R5,R5
   \       0x96   0x2D00             CMP      R5,#+0
   \       0x98   0xD004             BEQ.N    ??main_8
    162                          position = LEFT;
   \       0x9A   0x251E             MOVS     R5,#+30
    163                          distance = distance / 100;
   \       0x9C   0x2064             MOVS     R0,#+100
   \       0x9E   0xFBB7 0xF7F0      UDIV     R7,R7,R0
   \       0xA2   0xE005             B.N      ??main_7
    164                      } else {
    165                          position = RIGHT;
   \                     ??main_8: (+1)
   \       0xA4   0x2596             MOVS     R5,#+150
    166                          distance = distance % 100;
   \       0xA6   0x2064             MOVS     R0,#+100
   \       0xA8   0xFBB7 0xF1F0      UDIV     R1,R7,R0
   \       0xAC   0xFB00 0x7711      MLS      R7,R0,R1,R7
    167                      }
    168          
    169                      if (pre_pos != position) {
   \                     ??main_7: (+1)
   \       0xB0   0x0028             MOVS     R0,R5
   \       0xB2   0xB2A4             UXTH     R4,R4
   \       0xB4   0xB280             UXTH     R0,R0
   \       0xB6   0x4284             CMP      R4,R0
   \       0xB8   0xD006             BEQ.N    ??main_9
    170                          // Servo use PB1
    171                          Servo_Turn(position);
   \       0xBA   0x0028             MOVS     R0,R5
   \       0xBC   0xB280             UXTH     R0,R0
   \       0xBE   0x.... 0x....      BL       Servo_Turn
    172                          Delay(10);
   \       0xC2   0x200A             MOVS     R0,#+10
   \       0xC4   0x.... 0x....      BL       Delay
    173                      }
    174          
    175                      DC_Motor_UpdateAUTO(distance);
   \                     ??main_9: (+1)
   \       0xC8   0x0038             MOVS     R0,R7
   \       0xCA   0x.... 0x....      BL       DC_Motor_UpdateAUTO
    176          
    177                      state.position = position;
                                            ^
Warning[Pe188]: enumerated type mixed with another type
   \       0xCE   0x0028             MOVS     R0,R5
   \       0xD0   0xF88D 0x0002      STRB     R0,[SP, #+2]
    178                  }
    179                  pre_pos = position;
   \                     ??main_4: (+1)
   \       0xD4   0x002C             MOVS     R4,R5
    180                  Delay(1);
   \       0xD6   0x2001             MOVS     R0,#+1
   \       0xD8   0x.... 0x....      BL       Delay
   \       0xDC   0xE79B             B.N      ??main_0
    181              }
    182              return 0;
                     ^
Warning[Pe111]: statement is unreachable
    183          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x000F'4240        DC32     0xf4240

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ADC_Configure
       0   DMA_Configure
       0   Delay
       0   EXTI_Configure
       0   GPIO_Configure
       8   Init_Configure
         8   -> ADC_Configure
         8   -> DC_Motor_Init
         8   -> DMA_Configure
         8   -> Dist_Init
         8   -> EXTI_Configure
         8   -> GPIO_Configure
         8   -> NVIC_Configure
         8   -> PIR_Init
         8   -> RCC_Configure
         8   -> Servo_Init
         8   -> SystemInit
         8   -> TIM_Configure
         8   -> UART_Init
         8   -> Ultra_Init
       8   NVIC_Configure
         8   -> NVIC_PriorityGroupConfig
       0   RCC_Configure
       0   TIM_Configure
      24   main
        24   -> DC_Motor_UpdateAUTO
        24   -> DC_Motor_UpdateMAN
        24   -> Delay
        24   -> Dist_Get_Distance
        24   -> Init_Configure
        24   -> PIR_Get_Exist
        24   -> Servo_Turn
        24   -> UART_GetState
        24   -> Ultra_Measure_Distance


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       2  ADC_Configure
       2  DMA_Configure
      28  Delay
       2  EXTI_Configure
       2  GPIO_Configure
      60  Init_Configure
      12  NVIC_Configure
       2  RCC_Configure
       2  TIM_Configure
     222  main

 
 338 bytes in section .text
 
 338 bytes of CODE memory

Errors: none
Warnings: 2

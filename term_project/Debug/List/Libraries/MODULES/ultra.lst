###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         19/Dec/2022  20:35:16
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\code\Embedded_Lab\term_project\Libraries\MODULES\ultra.c
#    Command line      =
#        -f
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\ultra.o.rsp
#        (C:\code\Embedded_Lab\term_project\Libraries\MODULES\ultra.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES -o
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\ -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\code\Embedded_Lab\term_project\libraries\LCD\ -I
#        C:\code\Embedded_Lab\term_project\libraries\MODULES\ -I
#        C:\code\Embedded_Lab\term_project\user\ -I
#        C:\code\Embedded_Lab\term_project\user\inc\ -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\ultra.o.d
#    Locale            =  C
#    List file         =
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES\ultra.lst
#    Object file       =
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\ultra.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\code\Embedded_Lab\term_project\Libraries\MODULES\ultra.c
      1          #include "ultra.h"
      2          #include "misc.h"
      3          #include "stm32f10x.h"
      4          
      5          //int cap_rising_edge = 0;	// counter value at rising edge
      6          //int cap_falling_edge = 0;	// counter value at falling edge
      7          //int pulse_width = 0;		// = (counter value at falling edge) - (counter value at rising edge)
      8          
      9          /* Distance Result */
     10          //int Distance = 0;
     11          //
     12          //void Ultra_RCC_Configure(void) {
     13          //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
     14          //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
     15          //	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
     16          //}
     17          //
     18          //void Ultra_GPIO_Configure(void) {
     19          //	GPIO_InitTypeDef GPIO_InitStructure;
     20          //
     21          //	// Trigger (PA7)
     22          //	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
     23          //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
     24          //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     25          //	GPIO_Init(GPIOA, &GPIO_InitStructure);
     26          //
     27          //	// TIM3 Ch1 (PA6) echo
     28          //	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
     29          //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
     30          //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     31          //	GPIO_Init(GPIOA, &GPIO_InitStructure);
     32          //}
     33          //
     34          //void Ultra_TIM_Configure(void) {
     35          //	/* Time base configuration */
     36          //	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
     37          //	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
     38          //	TIM_TimeBaseStructure.TIM_Prescaler = (uint16_t)(SystemCoreClock / 1000000) - 1;	// 1Hz
     39          //	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
     40          //	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
     41          //	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
     42          //
     43          //	/* PWM1 Mode configuration: Channel3 */
     44          //	TIM_ICInitTypeDef TIM_ICInitStructure;
     45          //	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;		// input capture timing
     46          //	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;	// TIM Input1 is connected to IC1
     47          //	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
     48          //	TIM_ICInitStructure.TIM_ICFilter = 0x0;
     49          //	TIM_ICInitStructure.TIM_Channel = TIM_Channel_1;
     50          //	TIM_ICInit(TIM3, &TIM_ICInitStructure);
     51          //	TIM_Cmd(TIM3, ENABLE);
     52          //	TIM_ITConfig(TIM3, TIM_IT_CC1, ENABLE);
     53          //}
     54          //
     55          //void Ultra_NVIC_Configure(void) {
     56          //	// Enable the TIM3 global Interrupt
     57          //	NVIC_InitTypeDef NVIC_InitStructure;
     58          //	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
     59          //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
     60          //	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     61          //	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     62          //	NVIC_Init(&NVIC_InitStructure);
     63          //}
     64          //
     65          //void Ultra_Init(void) {
     66          //	Ultra_RCC_Configure();
     67          //	Ultra_GPIO_Configure();
     68          //	Ultra_TIM_Configure();
     69          //	Ultra_NVIC_Configure();
     70          //}
     71          //
     72          //void Ultra_TIM3_IRQHandler(void) {	// if rising(or falling) edge occurs
     73          //	/*ITStatus*/
     74          //	if (TIM_GetITStatus(TIM3, TIM_IT_CC1) == SET)	// if there is input value that has been captured
     75          //	{												// (= if TIM3->SR register CC1IF bit is High)
     76          //
     77          //		TIM_ClearITPendingBit(TIM3, TIM_IT_CC1);	// clear TIM3->SR register CC1IF bit to Low
     78          //
     79          //		if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_6) == Bit_SET)	// if Timer3 Ch1 pin(PA6) value is High (rising edge)
     80          //		{
     81          //			cap_rising_edge = TIM_GetCapture1(TIM3);	// read captured data (counter value at rising edge)
     82          //			TIM3->CCER |= TIM_CCER_CC1P;	// change ICPolarity(capture timing) to falling edge
     83          //		}
     84          //		else			// if Timer3 Ch1 pin(PA6) value is Low (falling edge)
     85          //		{
     86          //			cap_falling_edge = TIM_GetCapture1(TIM3);	// read captured data (counter value at falling edge)
     87          //			pulse_width = (uint32_t)(cap_falling_edge - cap_rising_edge);
     88          //			TIM3->CCER &= ~TIM_CCER_CC1P;	// change ICPolarity(capture timing) to rising edge
     89          //			
     90          //
     91          //
     92          //			/*	Result Distance (cm)	*/
     93          //			Distance = pulse_width * 17 / 1000;
     94          //		}
     95          //	}
     96          //}
     97          //
     98          ///* Library Function */
     99          //void TIM3_IRQHandler(void) {	// if rising(or falling) edge occurs
    100          //	Ultra_TIM3_IRQHandler();
    101          //}
    102          //
    103          //void Ultra_Trigger(void) {
    104          //	int i;
    105          //
    106          //	GPIO_SetBits(GPIOA, GPIO_Pin_7);	// set trigger
    107          //	for (i = 0; i < 50000; i++) {
    108          //		/* delay(); */				// send ultrasonic wave
    109          //	}	
    110          //	GPIO_ResetBits(GPIOA, GPIO_Pin_7);	// reset trigger
    111          //}
    112          //
    113          //
    114          //void Ultra_Measure_Distance(void) {	// Call in main function
    115          //	Ultra_Init();
    116          //	Ultra_Trigger();
    117          //}
    118          //
    119          //int Ultra_Get_Distance(void){
    120          //	return Distance;
    121          //}
    122          
    123          /*
    124          int main() {
    125          	Ultra_Measure_Distance();
    126          }
    127          */


 
 
 0 bytes of memory

Errors: none
Warnings: none

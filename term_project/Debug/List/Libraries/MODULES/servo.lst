###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         30/Nov/2022  21:58:01
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\code\Embedded_Lab\term_project\Libraries\MODULES\servo.c
#    Command line      =
#        -f
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\servo.o.rsp
#        (C:\code\Embedded_Lab\term_project\Libraries\MODULES\servo.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES -o
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\ -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\code\Embedded_Lab\term_project\libraries\LCD\ -I
#        C:\code\Embedded_Lab\term_project\libraries\MODULES\ -I
#        C:\code\Embedded_Lab\term_project\user\ -I
#        C:\code\Embedded_Lab\term_project\user\inc\ -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\servo.o.d
#    Locale            =  C
#    List file         =
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES\servo.lst
#    Object file       =
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\servo.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\code\Embedded_Lab\term_project\Libraries\MODULES\servo.c
      1          #include "servo.h"
      2          #include "stm32f10x.h"
      3          #include "stm32f10x_gpio.h"
      4          #include "stm32f10x_rcc.h"
      5          #include "stm32f10x_tim.h"
      6          
      7          /**
      8           * @brief PWM Init Function
      9           *      ? ms마다 pulse 함. 
     10           *      TIM3 의 3번 채널 = GPIO B0 Pin 를 사용함
     11           */

   \                                 In section .text, align 2, keep-with-next
     12          void Servo_Pwm_Init(void){
   \                     Servo_Pwm_Init: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
     13              TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
     14              // SystemCoreClock = 72MHz = 72,000,000Hz
     15              // 72MHz * 1/Period * 1/Prescaler = 주파수 (Hz)
     16              // servo 는 50Hz 를 맞추어야 함.
     17              
     18              uint16_t period = (uint16_t) 1000 - 1;
   \        0x4   0xF240 0x30E7      MOVW     R0,#+999
     19              // Hz = 72MHz * 1/1000 * 1/Prescaler = 72,000 * 1/Prescaler
     20          
     21              uint16_t prescaler = (uint16_t) 1440 - 1;
   \        0x8   0xF240 0x519F      MOVW     R1,#+1439
     22              // Hz = 72MHz * 1/1000 * 1/1440 = 50;
     23              // Hz = 100;
     24              
     25              TIM_TimeBaseStructure.TIM_Period = period;         
   \        0xC   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     26              TIM_TimeBaseStructure.TIM_Prescaler = prescaler;
   \       0x10   0xF8AD 0x1000      STRH     R1,[SP, #+0]
     27              TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     28              TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \       0x1A   0x2010             MOVS     R0,#+16
   \       0x1C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     29          
     30              TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
   \       0x20   0x....             LDR.N    R4,??DataTable2
   \       0x22   0x4669             MOV      R1,SP
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x.... 0x....      BL       TIM_TimeBaseInit
     31          
     32              TIM_OCInitTypeDef TIM_OCInitStructure;
     33          
     34              TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x2A   0x2060             MOVS     R0,#+96
   \       0x2C   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     35              TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     36              TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x36   0x2001             MOVS     R0,#+1
   \       0x38   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     37              
     38              TIM_OCInitStructure.TIM_Pulse = (uint16_t) 75;
   \       0x3C   0x204B             MOVS     R0,#+75
   \       0x3E   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     39              
     40              // servo moter는 0.5ms에서 0도, 2.5ms 에서 180도로 회전함
     41          
     42              // if Period = 1000
     43              // 0.5/20 * 1000 = 25
     44          
     45              // if Period = 20000
     46              // 0.5/20 * 20000 = 500
     47          
     48              TIM_OC3Init(TIM3, &TIM_OCInitStructure);
   \       0x42   0xA903             ADD      R1,SP,#+12
   \       0x44   0x0020             MOVS     R0,R4
   \       0x46   0x.... 0x....      BL       TIM_OC3Init
     49              TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);
   \       0x4A   0x2100             MOVS     R1,#+0
   \       0x4C   0x0020             MOVS     R0,R4
   \       0x4E   0x.... 0x....      BL       TIM_OC3PreloadConfig
     50              
     51              TIM_ARRPreloadConfig(TIM3, ENABLE);
   \       0x52   0x2101             MOVS     R1,#+1
   \       0x54   0x0020             MOVS     R0,R4
   \       0x56   0x.... 0x....      BL       TIM_ARRPreloadConfig
     52              TIM_Cmd(TIM3, ENABLE);
   \       0x5A   0x2101             MOVS     R1,#+1
   \       0x5C   0x0020             MOVS     R0,R4
   \       0x5E   0x.... 0x....      BL       TIM_Cmd
     53          }
   \       0x62   0xB008             ADD      SP,SP,#+32
   \       0x64   0xBD10             POP      {R4,PC}
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void Servo_GPIO_Init(void){
   \                     Servo_GPIO_Init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     56              GPIO_InitTypeDef GPIO_InitStructure;
     57          
     58              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     59              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \        0x8   0x2018             MOVS     R0,#+24
   \        0xA   0xF88D 0x0003      STRB     R0,[SP, #+3]
     60              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \        0xE   0x2003             MOVS     R0,#+3
   \       0x10   0xF88D 0x0002      STRB     R0,[SP, #+2]
     61              GPIO_Init(GPIOB, &GPIO_InitStructure);
   \       0x14   0x4669             MOV      R1,SP
   \       0x16   0x....             LDR.N    R0,??DataTable2_1
   \       0x18   0x.... 0x....      BL       GPIO_Init
     62          }
   \       0x1C   0xBD01             POP      {R0,PC}
     63          

   \                                 In section .text, align 2, keep-with-next
     64          void Servo_RCC_Init(void){
   \                     Servo_RCC_Init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     65              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2002             MOVS     R0,#+2
   \        0x6   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     66              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x2008             MOVS     R0,#+8
   \        0xE   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     67              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     68          }
   \       0x1A   0xBD01             POP      {R0,PC}
     69          

   \                                 In section .text, align 2, keep-with-next
     70          void Servo_Init(void){
   \                     Servo_Init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     71              Servo_RCC_Init();
   \        0x2   0x.... 0x....      BL       Servo_RCC_Init
     72              Servo_GPIO_Init();
   \        0x6   0x.... 0x....      BL       Servo_GPIO_Init
     73              Servo_Pwm_Init();
   \        0xA   0x.... 0x....      BL       Servo_Pwm_Init
     74          }
   \        0xE   0xBD01             POP      {R0,PC}
     75          /**
     76           * @brief servo motor turn phi
     77           * 
     78           * @param phi 0 < phi < 180 
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          void Servo_Turn(uint16_t phi){
   \                     Servo_Turn: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
     81              //if(phi > 180 || phi < 0) return;
     82          
     83              uint16_t pulse = (uint16_t) (((double) phi/180)*100 + 25);
   \        0x2   0xB280             UXTH     R0,R0
   \        0x4   0x.... 0x....      BL       __aeabi_ui2d
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x....             LDR.N    R3,??DataTable2_2
   \        0xC   0x.... 0x....      BL       __aeabi_ddiv
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x....             LDR.N    R3,??DataTable2_3
   \       0x14   0x.... 0x....      BL       __aeabi_dmul
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0x....             LDR.N    R3,??DataTable2_4
   \       0x1C   0x.... 0x....      BL       __aeabi_dadd
   \       0x20   0x.... 0x....      BL       __aeabi_d2iz
     84          
     85              TIM_OCInitTypeDef TIM_OCInitStructure;
     86              TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x24   0x2160             MOVS     R1,#+96
   \       0x26   0xF8AD 0x1000      STRH     R1,[SP, #+0]
     87              TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0xF8AD 0x1008      STRH     R1,[SP, #+8]
     88              TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x30   0x2101             MOVS     R1,#+1
   \       0x32   0xF8AD 0x1002      STRH     R1,[SP, #+2]
     89              TIM_OCInitStructure.TIM_Pulse = (uint16_t) pulse; // us
   \       0x36   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     90              TIM_OC3Init(TIM3, &TIM_OCInitStructure);
   \       0x3A   0x4669             MOV      R1,SP
   \       0x3C   0x....             LDR.N    R0,??DataTable2
   \       0x3E   0x.... 0x....      BL       TIM_OC3Init
     91          
     92              return;
   \       0x42   0xB005             ADD      SP,SP,#+20
   \       0x44   0xBD00             POP      {PC}
     93          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x4066'8000        DC32     0x40668000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x4059'0000        DC32     0x40590000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x4039'0000        DC32     0x40390000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Servo_GPIO_Init
         8   -> GPIO_Init
       8   Servo_Init
         8   -> Servo_GPIO_Init
         8   -> Servo_Pwm_Init
         8   -> Servo_RCC_Init
      40   Servo_Pwm_Init
        40   -> TIM_ARRPreloadConfig
        40   -> TIM_Cmd
        40   -> TIM_OC3Init
        40   -> TIM_OC3PreloadConfig
        40   -> TIM_TimeBaseInit
       8   Servo_RCC_Init
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      24   Servo_Turn
        24   -> TIM_OC3Init
        24   -> __aeabi_d2iz
        24   -> __aeabi_dadd
        24   -> __aeabi_ddiv
        24   -> __aeabi_dmul
        24   -> __aeabi_ui2d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
      30  Servo_GPIO_Init
      16  Servo_Init
     102  Servo_Pwm_Init
      28  Servo_RCC_Init
      70  Servo_Turn

 
 266 bytes in section .text
 
 266 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         23/Nov/2022  22:29:33
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\code\Embedded_Lab\term_project\Libraries\MODULES\hc_sr04.c
#    Command line      =
#        -f
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\hc_sr04.o.rsp
#        (C:\code\Embedded_Lab\term_project\Libraries\MODULES\hc_sr04.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES -o
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\ -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\code\Embedded_Lab\term_project\libraries\LCD\ -I
#        C:\code\Embedded_Lab\term_project\libraries\MODULES\ -I
#        C:\code\Embedded_Lab\term_project\user\ -I
#        C:\code\Embedded_Lab\term_project\user\inc\ -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\hc_sr04.o.d
#    Locale            =  C
#    List file         =
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES\hc_sr04.lst
#    Object file       =
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\hc_sr04.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\code\Embedded_Lab\term_project\Libraries\MODULES\hc_sr04.c
      1          #include "hc_sr04.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          void initMeasureTimer(void) {
   \                     initMeasureTimer: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
      4          	RCC_ClocksTypeDef RCC_ClocksStatus;
      5          	RCC_GetClocksFreq(&RCC_ClocksStatus);
   \        0x4   0xA80A             ADD      R0,SP,#+40
   \        0x6   0x.... 0x....      BL       RCC_GetClocksFreq
      6          	uint16_t prescaler = RCC_ClocksStatus.SYSCLK_Frequency / 1000000 - 1; //1 tick = 1us (1 tick = 0.165mm resolution)
   \        0xA   0x980A             LDR      R0,[SP, #+40]
   \        0xC   0x....             LDR.N    R1,??DataTable1
   \        0xE   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x12   0x1E45             SUBS     R5,R0,#+1
      7          
      8          	TIM_DeInit(US_TIMER);
   \       0x14   0x....             LDR.N    R4,??DataTable1_1
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x.... 0x....      BL       TIM_DeInit
      9          	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
     10          	TIM_TimeBaseStructure.TIM_Prescaler = prescaler;
   \       0x1C   0xF8AD 0x500C      STRH     R5,[SP, #+12]
     11          	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     12          	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
   \       0x26   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x2A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     13          	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     14          	TIM_TimeBaseInit(US_TIMER, &TIM_TimeBaseStructure);
   \       0x34   0xA903             ADD      R1,SP,#+12
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x.... 0x....      BL       TIM_TimeBaseInit
     15          
     16          	TIM_OCInitTypeDef TIM_OCStructure;
     17          	TIM_OCStructInit(&TIM_OCStructure);
   \       0x3C   0xA806             ADD      R0,SP,#+24
   \       0x3E   0x.... 0x....      BL       TIM_OCStructInit
     18          	TIM_OCStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x42   0x2060             MOVS     R0,#+96
   \       0x44   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     19          	TIM_OCStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x48   0x2001             MOVS     R0,#+1
   \       0x4A   0xF8AD 0x001A      STRH     R0,[SP, #+26]
     20          	TIM_OCStructure.TIM_Pulse = 15; //us
   \       0x4E   0x200F             MOVS     R0,#+15
   \       0x50   0xF8AD 0x001E      STRH     R0,[SP, #+30]
     21          	TIM_OCStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xF8AD 0x0020      STRH     R0,[SP, #+32]
     22          	TIM_OC3Init(US_TIMER, &TIM_OCStructure);
   \       0x5A   0xA906             ADD      R1,SP,#+24
   \       0x5C   0x0020             MOVS     R0,R4
   \       0x5E   0x.... 0x....      BL       TIM_OC3Init
     23          
     24          	TIM_ICInitTypeDef TIM_ICStructure;
     25          	TIM_ICStructure.TIM_Channel = TIM_Channel_1;
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     26          	TIM_ICStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     27          	TIM_ICStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \       0x6E   0x2001             MOVS     R0,#+1
   \       0x70   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     28          	TIM_ICStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \       0x74   0x2000             MOVS     R0,#+0
   \       0x76   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     29          	TIM_ICStructure.TIM_ICFilter = 0;
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     30          	TIM_PWMIConfig(US_TIMER, &TIM_ICStructure);
   \       0x80   0x4669             MOV      R1,SP
   \       0x82   0x0020             MOVS     R0,R4
   \       0x84   0x.... 0x....      BL       TIM_PWMIConfig
     31          
     32          	TIM_SelectInputTrigger(US_TIMER, US_TIMER_TRIG_SOURCE);
   \       0x88   0x2150             MOVS     R1,#+80
   \       0x8A   0x0020             MOVS     R0,R4
   \       0x8C   0x.... 0x....      BL       TIM_SelectInputTrigger
     33          	TIM_SelectMasterSlaveMode(US_TIMER, TIM_MasterSlaveMode_Enable);
   \       0x90   0x2180             MOVS     R1,#+128
   \       0x92   0x0020             MOVS     R0,R4
   \       0x94   0x.... 0x....      BL       TIM_SelectMasterSlaveMode
     34          
     35          	TIM_CtrlPWMOutputs(US_TIMER, ENABLE);
   \       0x98   0x2101             MOVS     R1,#+1
   \       0x9A   0x0020             MOVS     R0,R4
   \       0x9C   0x.... 0x....      BL       TIM_CtrlPWMOutputs
     36          
     37          	TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
   \       0xA0   0x2101             MOVS     R1,#+1
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0x.... 0x....      BL       TIM_ClearFlag
     38                  TIM_ITConfig(US_TIMER,TIM_IT_Trigger,ENABLE);
   \       0xA8   0x2201             MOVS     R2,#+1
   \       0xAA   0x2140             MOVS     R1,#+64
   \       0xAC   0x0020             MOVS     R0,R4
   \       0xAE   0x.... 0x....      BL       TIM_ITConfig
     39          }
   \       0xB2   0xB00F             ADD      SP,SP,#+60
   \       0xB4   0xBD30             POP      {R4,R5,PC}
     40          

   \                                 In section .text, align 2, keep-with-next
     41          uint32_t HCSR04GetDistance(void) {
   \                     HCSR04GetDistance: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
     42          	(US_TIMER)->CNT = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....             LDR.N    R1,??DataTable1_2
   \        0x6   0x8008             STRH     R0,[R1, #+0]
     43          	TIM_Cmd(US_TIMER, ENABLE);
   \        0x8   0x....             LDR.N    R4,??DataTable1_1
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       TIM_Cmd
     44          	while(!TIM_GetFlagStatus(US_TIMER, TIM_FLAG_Update));
   \                     ??HCSR04GetDistance_0: (+1)
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       TIM_GetFlagStatus
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD0F9             BEQ.N    ??HCSR04GetDistance_0
     45          	TIM_Cmd(US_TIMER, DISABLE);
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x.... 0x....      BL       TIM_Cmd
     46          	TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
   \       0x26   0x2101             MOVS     R1,#+1
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       TIM_ClearFlag
     47          	return (TIM_GetCapture2(US_TIMER)-TIM_GetCapture1(US_TIMER))*165/1000;
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       TIM_GetCapture2
   \       0x34   0x0005             MOVS     R5,R0
   \       0x36   0xB2AD             UXTH     R5,R5
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x.... 0x....      BL       TIM_GetCapture1
   \       0x3E   0x1A2D             SUBS     R5,R5,R0
   \       0x40   0x20A5             MOVS     R0,#+165
   \       0x42   0x4345             MULS     R5,R0,R5
   \       0x44   0xF44F 0x707A      MOV      R0,#+1000
   \       0x48   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \       0x4C   0xBD32             POP      {R1,R4,R5,PC}
     48          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x000F'4240        DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4000'0424        DC32     0x40000424

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   HCSR04GetDistance
        16   -> TIM_ClearFlag
        16   -> TIM_Cmd
        16   -> TIM_GetCapture1
        16   -> TIM_GetCapture2
        16   -> TIM_GetFlagStatus
      72   initMeasureTimer
        72   -> RCC_GetClocksFreq
        72   -> TIM_ClearFlag
        72   -> TIM_CtrlPWMOutputs
        72   -> TIM_DeInit
        72   -> TIM_ITConfig
        72   -> TIM_OC3Init
        72   -> TIM_OCStructInit
        72   -> TIM_PWMIConfig
        72   -> TIM_SelectInputTrigger
        72   -> TIM_SelectMasterSlaveMode
        72   -> TIM_TimeBaseInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
      78  HCSR04GetDistance
     182  initMeasureTimer

 
 272 bytes in section .text
 
 272 bytes of CODE memory

Errors: none
Warnings: none

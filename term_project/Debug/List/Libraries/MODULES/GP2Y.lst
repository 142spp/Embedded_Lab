###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         07/Dec/2022  20:34:10
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\code\Embedded_Lab\term_project\Libraries\MODULES\GP2Y.c
#    Command line      =
#        -f
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\GP2Y.o.rsp
#        (C:\code\Embedded_Lab\term_project\Libraries\MODULES\GP2Y.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES -o
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\ -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\code\Embedded_Lab\term_project\libraries\LCD\ -I
#        C:\code\Embedded_Lab\term_project\libraries\MODULES\ -I
#        C:\code\Embedded_Lab\term_project\user\ -I
#        C:\code\Embedded_Lab\term_project\user\inc\ -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\GP2Y.o.d
#    Locale            =  C
#    List file         =
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES\GP2Y.lst
#    Object file       =
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\GP2Y.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\code\Embedded_Lab\term_project\Libraries\MODULES\GP2Y.c
      1          #include <math.h>
      2          #include "stm32f10x.h"
      3          #include "stm32f10x_adc.h"
      4          #include "stm32f10x_gpio.h"
      5          #include "stm32f10x_rcc.h"
      6          
      7          /* function prototype */
      8          void GP2Y_Delay(void);
      9          void GP2Y_RCC_Configure(void);
     10          void GP2Y_GPIO_Configure(void);
     11          void GP2Y_ADC_Configure(void);
     12          void GP2Y_Init_Configure(void);
     13          float GP2Y_Get_Distance(void);
     14          

   \                                 In section .bss, align 4
     15          float ADC_Val;
   \                     ADC_Val:
   \        0x0                      DS8 4
     16          
     17          /**
     18           * @brief Enable or Disable Clocks
     19           */

   \                                 In section .text, align 2, keep-with-next
     20          void GP2Y_RCC_Configure(void) {
   \                     GP2Y_RCC_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     21              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); // Photoresistor Pin Enable
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2008             MOVS     R0,#+8
   \        0x6   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     22              RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);  // ADC Enable
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0xF44F 0x7000      MOV      R0,#+512
   \       0x10   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     23          }
   \       0x14   0xBD01             POP      {R0,PC}
     24          /**
     25           * @brief Enable GPIO Pins using GPIO_InitStructure
     26           */

   \                                 In section .text, align 2, keep-with-next
     27          void GP2Y_GPIO_Configure(void) {
   \                     GP2Y_GPIO_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     28              /* Photoresistor Enable */
     29              GPIO_InitTypeDef GPIO_InitStructure;
     30              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     31              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0003      STRB     R0,[SP, #+3]
     32              GPIO_Init(GPIOB, &GPIO_InitStructure);
   \        0xE   0x4669             MOV      R1,SP
   \       0x10   0x....             LDR.N    R0,??DataTable5
   \       0x12   0x.... 0x....      BL       GPIO_Init
     33          	// GPIOA�� 0�� Pin�� �����. 
     34          	// �̴� ���� ADC�� Channel0 ��. (schematic ����)
     35          }
   \       0x16   0xBD01             POP      {R0,PC}
     36          /**
     37           * @brief ADC Configure using ADC_InitStructure
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          void GP2Y_ADC_Configure(void) {
   \                     GP2Y_ADC_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
     40              ADC_InitTypeDef ADC_InitStructure;
     41          
     42              // ADC1 Configuration
     43              ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x9000             STR      R0,[SP, #+0]
     44              ADC_InitStructure.ADC_ScanConvMode = DISABLE;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0004      STRB     R0,[SP, #+4]
     45              ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xF88D 0x0005      STRB     R0,[SP, #+5]
     46              ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \       0x14   0xF45F 0x2060      MOVS     R0,#+917504
   \       0x18   0x9002             STR      R0,[SP, #+8]
     47              ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9003             STR      R0,[SP, #+12]
     48              ADC_InitStructure.ADC_NbrOfChannel = 1;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0xF88D 0x0010      STRB     R0,[SP, #+16]
     49              ADC_Init(ADC1, &ADC_InitStructure);
   \       0x24   0x....             LDR.N    R4,??DataTable5_1
   \       0x26   0x4669             MOV      R1,SP
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       ADC_Init
     50          	// �� �κ��� 8������ ����ߴ� �ڵ带 �״�� ���Ŷ� ���� ������� �ʾƵ� ��.
     51              
     52              ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_239Cycles5);  // ADC1 Channel 8 is GPIOB_Pin0
   \       0x2E   0x2307             MOVS     R3,#+7
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x2108             MOVS     R1,#+8
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       ADC_RegularChannelConfig
     53              ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);  // interrupt enable
   \       0x3A   0x2201             MOVS     R2,#+1
   \       0x3C   0xF44F 0x7108      MOV      R1,#+544
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       ADC_ITConfig
     54              // ADC_DMACmd(ADC1, ENABLE);  // DMA Enable
     55              ADC_Cmd(ADC1, ENABLE);     // ADC1 enable
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0x.... 0x....      BL       ADC_Cmd
     56          
     57              ADC_ResetCalibration(ADC1);
   \       0x4E   0x0020             MOVS     R0,R4
   \       0x50   0x.... 0x....      BL       ADC_ResetCalibration
     58              while (ADC_GetResetCalibrationStatus(ADC1)) ;
   \                     ??GP2Y_ADC_Configure_0: (+1)
   \       0x54   0x0020             MOVS     R0,R4
   \       0x56   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD1FA             BNE.N    ??GP2Y_ADC_Configure_0
     59              ADC_StartCalibration(ADC1);
   \       0x5E   0x0020             MOVS     R0,R4
   \       0x60   0x.... 0x....      BL       ADC_StartCalibration
     60              while (ADC_GetCalibrationStatus(ADC1)) ;
   \                     ??GP2Y_ADC_Configure_1: (+1)
   \       0x64   0x0020             MOVS     R0,R4
   \       0x66   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD1FA             BNE.N    ??GP2Y_ADC_Configure_1
     61              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \       0x6E   0x2101             MOVS     R1,#+1
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     62          }
   \       0x76   0xB006             ADD      SP,SP,#+24
   \       0x78   0xBD10             POP      {R4,PC}
     63          

   \                                 In section .text, align 2, keep-with-next
     64          void GP2Y_NVIC_Configure(void) {
   \                     GP2Y_NVIC_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     65              NVIC_InitTypeDef NVIC_InitStructure;
     66          
     67              NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;
   \        0x2   0x2012             MOVS     R0,#+18
   \        0x4   0xF88D 0x0000      STRB     R0,[SP, #+0]
     68              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0001      STRB     R0,[SP, #+1]
     69              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0xF88D 0x0002      STRB     R0,[SP, #+2]
     70              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0xF88D 0x0003      STRB     R0,[SP, #+3]
     71              NVIC_Init(&NVIC_InitStructure);
   \       0x1A   0x4668             MOV      R0,SP
   \       0x1C   0x.... 0x....      BL       NVIC_Init
     72          }
   \       0x20   0xBD01             POP      {R0,PC}
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void ADC1_2_IRQHandler(void) {
   \                     ADC1_2_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     75              if (ADC_GetITStatus(ADC1, ADC_IT_EOC) != RESET) {
   \        0x2   0x....             LDR.N    R4,??DataTable5_1
   \        0x4   0xF44F 0x7108      MOV      R1,#+544
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       ADC_GetITStatus
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD00B             BEQ.N    ??ADC1_2_IRQHandler_0
     76                  ADC_Val = ADC_GetConversionValue(ADC1 );
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       ADC_GetConversionValue
   \       0x18   0x.... 0x....      BL       __aeabi_ui2f
   \       0x1C   0x....             LDR.N    R1,??DataTable5_2
   \       0x1E   0x6008             STR      R0,[R1, #+0]
     77                  //--- Clear ADC1 AWD pending interrupt bit
     78                  ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
   \       0x20   0xF44F 0x7108      MOV      R1,#+544
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x.... 0x....      BL       ADC_ClearITPendingBit
     79              }
     80          }
   \                     ??ADC1_2_IRQHandler_0: (+1)
   \       0x2A   0xBD10             POP      {R4,PC}
     81          
     82          /**
     83           * @brief excute All configuration function
     84           */

   \                                 In section .text, align 2, keep-with-next
     85          void GP2Y_Init_Configure(void) {
   \                     GP2Y_Init_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     86              SystemInit();
   \        0x2   0x.... 0x....      BL       SystemInit
     87              GP2Y_RCC_Configure();
   \        0x6   0x.... 0x....      BL       GP2Y_RCC_Configure
     88              GP2Y_GPIO_Configure();
   \        0xA   0x.... 0x....      BL       GP2Y_GPIO_Configure
     89              GP2Y_ADC_Configure();
   \        0xE   0x.... 0x....      BL       GP2Y_ADC_Configure
     90              GP2Y_NVIC_Configure();
   \       0x12   0x.... 0x....      BL       GP2Y_NVIC_Configure
     91          }
   \       0x16   0xBD01             POP      {R0,PC}
     92          

   \                                 In section .text, align 2, keep-with-next
     93          void GP2Y_Delay(void) {
     94              for (int i = 0; i < 1000000; i++)
   \                     GP2Y_Delay: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0xE000             B.N      ??GP2Y_Delay_0
   \                     ??GP2Y_Delay_1: (+1)
   \        0x4   0x1C40             ADDS     R0,R0,#+1
   \                     ??GP2Y_Delay_0: (+1)
   \        0x6   0x....             LDR.N    R1,??DataTable5_3
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xDBFB             BLT.N    ??GP2Y_Delay_1
     95                  ;
     96          }
   \        0xC   0x4770             BX       LR
     97          

   \                                 In section .text, align 2, keep-with-next
     98          float GP2Y_Get_Distance() {
     99              float distance = ADC_Val;
   \                     GP2Y_Get_Distance: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable5_2
   \        0x2   0x6800             LDR      R0,[R0, #+0]
    100             
    101                  return distance;
   \        0x4   0x4770             BX       LR
    102          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x4001'2400        DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     ADC_Val

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x000F'4240        DC32     0xf4240

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ADC1_2_IRQHandler
         8   -> ADC_ClearITPendingBit
         8   -> ADC_GetConversionValue
         8   -> ADC_GetITStatus
         8   -> __aeabi_ui2f
      32   GP2Y_ADC_Configure
        32   -> ADC_Cmd
        32   -> ADC_GetCalibrationStatus
        32   -> ADC_GetResetCalibrationStatus
        32   -> ADC_ITConfig
        32   -> ADC_Init
        32   -> ADC_RegularChannelConfig
        32   -> ADC_ResetCalibration
        32   -> ADC_SoftwareStartConvCmd
        32   -> ADC_StartCalibration
       0   GP2Y_Delay
       8   GP2Y_GPIO_Configure
         8   -> GPIO_Init
       0   GP2Y_Get_Distance
       8   GP2Y_Init_Configure
         8   -> GP2Y_ADC_Configure
         8   -> GP2Y_GPIO_Configure
         8   -> GP2Y_NVIC_Configure
         8   -> GP2Y_RCC_Configure
         8   -> SystemInit
       8   GP2Y_NVIC_Configure
         8   -> NVIC_Init
       8   GP2Y_RCC_Configure
         8   -> RCC_APB2PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
      44  ADC1_2_IRQHandler
       4  ADC_Val
     122  GP2Y_ADC_Configure
      14  GP2Y_Delay
      24  GP2Y_GPIO_Configure
       6  GP2Y_Get_Distance
      24  GP2Y_Init_Configure
      34  GP2Y_NVIC_Configure
      22  GP2Y_RCC_Configure

 
   4 bytes in section .bss
 306 bytes in section .text
 
 306 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none

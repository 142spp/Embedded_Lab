###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         20/Dec/2022  10:58:54
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\code\Embedded_Lab\term_project\Libraries\MODULES\uart.c
#    Command line      =
#        -f
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\uart.o.rsp
#        (C:\code\Embedded_Lab\term_project\Libraries\MODULES\uart.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES -o
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\ -I
#        C:\code\Embedded_Lab\term_project\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\code\Embedded_Lab\term_project\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\code\Embedded_Lab\term_project\libraries\LCD\ -I
#        C:\code\Embedded_Lab\term_project\libraries\MODULES\ -I
#        C:\code\Embedded_Lab\term_project\user\ -I
#        C:\code\Embedded_Lab\term_project\user\inc\ -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\uart.o.d
#    Locale            =  C
#    List file         =
#        C:\code\Embedded_Lab\term_project\Debug\List\Libraries\MODULES\uart.lst
#    Object file       =
#        C:\code\Embedded_Lab\term_project\Debug\Obj\Libraries\MODULES\uart.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\code\Embedded_Lab\term_project\Libraries\MODULES\uart.c
      1          #include "misc.h"

   \                                 In section .text, align 4, keep-with-next
   \   static __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable5
   \       0x12   0xB240             SXTB     R0,R0
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR
      2          #include "stm32f10x.h"
      3          #include "stm32f10x_rcc.h"
      4          #include "stm32f10x_gpio.h"
      5          #include "stm32f10x_usart.h"
      6          #include "uart.h"
      7          

   \                                 In section .bss, align 2
      8          uint16_t uart_state;
   \                     uart_state:
   \        0x0                      DS8 2
      9          

   \                                 In section .text, align 2, keep-with-next
     10          void UART_RCC_Init(void){
   \                     UART_RCC_Init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     11              /* UART TX/RX port clock enable */
     12              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2004             MOVS     R0,#+4
   \        0x6   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     13              /* USART1 clock enable */
     14              RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0xF44F 0x4080      MOV      R0,#+16384
   \       0x10   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     15              /* Alternate Function IO clock enable */
     16              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \       0x14   0x2101             MOVS     R1,#+1
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     17          }
   \       0x1C   0xBD01             POP      {R0,PC}
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void UART_GPIO_Init(void) {
   \                     UART_GPIO_Init: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
     20              GPIO_InitTypeDef GPIO_InitStructure;
     21          
     22              /* UART1 pin setting */
     23              // TX
     24              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \        0x2   0xF44F 0x7000      MOV      R0,#+512
   \        0x6   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     25              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \        0xA   0x2003             MOVS     R0,#+3
   \        0xC   0xF88D 0x0002      STRB     R0,[SP, #+2]
     26              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x10   0x2018             MOVS     R0,#+24
   \       0x12   0xF88D 0x0003      STRB     R0,[SP, #+3]
     27              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x16   0x....             LDR.N    R4,??DataTable5_1
   \       0x18   0x4669             MOV      R1,SP
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       GPIO_Init
     28              // RX
     29              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
   \       0x20   0xF44F 0x6080      MOV      R0,#+1024
   \       0x24   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     30              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x28   0x2003             MOVS     R0,#+3
   \       0x2A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     31              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   \       0x2E   0x2048             MOVS     R0,#+72
   \       0x30   0xF88D 0x0003      STRB     R0,[SP, #+3]
     32              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x34   0x4669             MOV      R1,SP
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x.... 0x....      BL       GPIO_Init
     33          }
   \       0x3C   0xBD13             POP      {R0,R1,R4,PC}
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void UART_USART1_Init(void) {
   \                     UART_USART1_Init: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
     36              USART_InitTypeDef USART1_InitStructure;
     37          
     38              USART_Cmd(USART1, ENABLE);
   \        0x2   0x....             LDR.N    R4,??DataTable5_2
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       USART_Cmd
     39              USART1_InitStructure.USART_BaudRate = 9600;
   \        0xC   0xF44F 0x5016      MOV      R0,#+9600
   \       0x10   0x9000             STR      R0,[SP, #+0]
     40              USART1_InitStructure.USART_WordLength = USART_WordLength_8b;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     41              USART1_InitStructure.USART_StopBits = USART_StopBits_1;
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     42              USART1_InitStructure.USART_Parity = USART_Parity_No;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     43              USART1_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \       0x24   0x200C             MOVS     R0,#+12
   \       0x26   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     44              USART1_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     45              USART_Init(USART1, &USART1_InitStructure);
   \       0x30   0x4669             MOV      R1,SP
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0x.... 0x....      BL       USART_Init
     46              USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \       0x38   0x2201             MOVS     R2,#+1
   \       0x3A   0xF240 0x5125      MOVW     R1,#+1317
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x.... 0x....      BL       USART_ITConfig
     47          }
   \       0x44   0xBD1F             POP      {R0-R4,PC}
     48          

   \                                 In section .text, align 2, keep-with-next
     49          void UART_NVIC_Init(void){
   \                     UART_NVIC_Init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     50              NVIC_InitTypeDef NVIC_InitStructure;
     51              // UART1
     52              // 'NVIC_EnableIRQ' is only required for USART setting
     53              NVIC_EnableIRQ(USART1_IRQn);
   \        0x2   0x2025             MOVS     R0,#+37
   \        0x4   0x.... 0x....      BL       __NVIC_EnableIRQ
     54              NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
   \        0x8   0x2025             MOVS     R0,#+37
   \        0xA   0xF88D 0x0000      STRB     R0,[SP, #+0]
     55              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;  // TODO
   \        0xE   0x2002             MOVS     R0,#+2
   \       0x10   0xF88D 0x0001      STRB     R0,[SP, #+1]
     56              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;         // TODO
   \       0x14   0x2003             MOVS     R0,#+3
   \       0x16   0xF88D 0x0002      STRB     R0,[SP, #+2]
     57              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xF88D 0x0003      STRB     R0,[SP, #+3]
     58              NVIC_Init(&NVIC_InitStructure);
   \       0x20   0x4668             MOV      R0,SP
   \       0x22   0x.... 0x....      BL       NVIC_Init
     59          }
   \       0x26   0xBD01             POP      {R0,PC}
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void UART_UpdateState(uint16_t data){
     62              uint16_t to_update;
     63                   if(data == 's') to_update = STATE_OFF;
   \                     UART_UpdateState: (+1)
   \        0x0   0x0002             MOVS     R2,R0
   \        0x2   0xB292             UXTH     R2,R2
   \        0x4   0x2A73             CMP      R2,#+115
   \        0x6   0xD102             BNE.N    ??UART_UpdateState_0
   \        0x8   0xF44F 0x5180      MOV      R1,#+4096
   \        0xC   0xE020             B.N      ??UART_UpdateState_1
     64              else if(data == 'o') to_update = STATE_ON;
   \                     ??UART_UpdateState_0: (+1)
   \        0xE   0x0002             MOVS     R2,R0
   \       0x10   0xB292             UXTH     R2,R2
   \       0x12   0x2A6F             CMP      R2,#+111
   \       0x14   0xD102             BNE.N    ??UART_UpdateState_2
   \       0x16   0xF44F 0x5100      MOV      R1,#+8192
   \       0x1A   0xE019             B.N      ??UART_UpdateState_1
     65              else if(data == 'm') to_update = STATE_MAN;
   \                     ??UART_UpdateState_2: (+1)
   \       0x1C   0x0002             MOVS     R2,R0
   \       0x1E   0xB292             UXTH     R2,R2
   \       0x20   0x2A6D             CMP      R2,#+109
   \       0x22   0xD102             BNE.N    ??UART_UpdateState_3
   \       0x24   0xF44F 0x4180      MOV      R1,#+16384
   \       0x28   0xE012             B.N      ??UART_UpdateState_1
     66              else if(data == 'a') to_update = STATE_AUTO;
   \                     ??UART_UpdateState_3: (+1)
   \       0x2A   0x0002             MOVS     R2,R0
   \       0x2C   0xB292             UXTH     R2,R2
   \       0x2E   0x2A61             CMP      R2,#+97
   \       0x30   0xD102             BNE.N    ??UART_UpdateState_4
   \       0x32   0xF44F 0x4100      MOV      R1,#+32768
   \       0x36   0xE00B             B.N      ??UART_UpdateState_1
     67              else if(data == 'l') to_update = STATE_LEFT;
   \                     ??UART_UpdateState_4: (+1)
   \       0x38   0x0002             MOVS     R2,R0
   \       0x3A   0xB292             UXTH     R2,R2
   \       0x3C   0x2A6C             CMP      R2,#+108
   \       0x3E   0xD102             BNE.N    ??UART_UpdateState_5
   \       0x40   0xF44F 0x7180      MOV      R1,#+256
   \       0x44   0xE004             B.N      ??UART_UpdateState_1
     68              else if(data == 'r') to_update = STATE_RIGHT;
   \                     ??UART_UpdateState_5: (+1)
   \       0x46   0xB280             UXTH     R0,R0
   \       0x48   0x2872             CMP      R0,#+114
   \       0x4A   0xD101             BNE.N    ??UART_UpdateState_1
   \       0x4C   0xF44F 0x7100      MOV      R1,#+512
     69          
     70              uart_state |= to_update;
   \                     ??UART_UpdateState_1: (+1)
   \       0x50   0x....             LDR.N    R0,??DataTable5_3
   \       0x52   0x8802             LDRH     R2,[R0, #+0]
   \       0x54   0x4311             ORRS     R1,R1,R2
   \       0x56   0x8001             STRH     R1,[R0, #+0]
     71          }
   \       0x58   0x4770             BX       LR
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void USART1_IRQHandler(void) {
   \                     USART1_IRQHandler: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
     74              uint16_t data;
     75              if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
   \        0x2   0x....             LDR.N    R4,??DataTable5_2
   \        0x4   0xF240 0x5525      MOVW     R5,#+1317
   \        0x8   0x0029             MOVS     R1,R5
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       USART_GetITStatus
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD009             BEQ.N    ??USART1_IRQHandler_0
     76                  // the most recent received data by the USART1 peripheral
     77                  data = USART_ReceiveData(USART1);
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       USART_ReceiveData
     78                  UART_UpdateState(data);
   \       0x1A   0xB280             UXTH     R0,R0
   \       0x1C   0x.... 0x....      BL       UART_UpdateState
     79                  // clear 'Read data register not empty' flag
     80                  USART_ClearITPendingBit(USART1, USART_IT_RXNE);
   \       0x20   0x0029             MOVS     R1,R5
   \       0x22   0x0020             MOVS     R0,R4
   \       0x24   0x.... 0x....      BL       USART_ClearITPendingBit
     81              }
     82          }
   \                     ??USART1_IRQHandler_0: (+1)
   \       0x28   0xBD31             POP      {R0,R4,R5,PC}
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void UART_Init(void){
   \                     UART_Init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     85              UART_RCC_Init();
   \        0x2   0x.... 0x....      BL       UART_RCC_Init
     86              UART_GPIO_Init();
   \        0x6   0x.... 0x....      BL       UART_GPIO_Init
     87              URAT_USART1_Init();
                     ^
Warning[Pe223]: function "URAT_USART1_Init" declared implicitly
   \        0xA   0x.... 0x....      BL       URAT_USART1_Init
     88              UART_NVIC_Init();
   \        0xE   0x.... 0x....      BL       UART_NVIC_Init
     89          }
   \       0x12   0xBD01             POP      {R0,PC}
     90          

   \                                 In section .text, align 2, keep-with-next
     91          uint16_t UART_GetState(void){
     92              return uart_state;
   \                     UART_GetState: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable5_3
   \        0x2   0x8800             LDRH     R0,[R0, #+0]
   \        0x4   0x4770             BX       LR
     93          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x4001'3800        DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x....'....        DC32     uart_state
     94          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   UART_GPIO_Init
        16   -> GPIO_Init
       0   UART_GetState
       8   UART_Init
         8   -> UART_GPIO_Init
         8   -> UART_NVIC_Init
         8   -> UART_RCC_Init
         8   -> URAT_USART1_Init
       8   UART_NVIC_Init
         8   -> NVIC_Init
         8   -> __NVIC_EnableIRQ
       8   UART_RCC_Init
         8   -> RCC_APB2PeriphClockCmd
      24   UART_USART1_Init
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init
       0   UART_UpdateState
      16   USART1_IRQHandler
        16   -> UART_UpdateState
        16   -> USART_ClearITPendingBit
        16   -> USART_GetITStatus
        16   -> USART_ReceiveData
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
      62  UART_GPIO_Init
       6  UART_GetState
      20  UART_Init
      40  UART_NVIC_Init
      30  UART_RCC_Init
      70  UART_USART1_Init
      90  UART_UpdateState
      42  USART1_IRQHandler
      28  __NVIC_EnableIRQ
       2  uart_state

 
   2 bytes in section .bss
 404 bytes in section .text
 
 404 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: 1

###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         02/Nov/2022  20:22:37
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  C:\code\Embedded_Lab\project\team02\user\main.c
#    Command line      =
#        -f C:\code\Embedded_Lab\project\team02\Debug\Obj\user\main.o.rsp
#        (C:\code\Embedded_Lab\project\team02\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\code\Embedded_Lab\project\team02\Debug\List\user -o
#        C:\code\Embedded_Lab\project\team02\Debug\Obj\user --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\code\Embedded_Lab\project\team02\libraries\CMSIS\DeviceSupport\ -I
#        C:\code\Embedded_Lab\project\team02\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\code\Embedded_Lab\project\team02\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\code\Embedded_Lab\project\team02\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\code\Embedded_Lab\project\team02\libraries\LCD\ -I
#        C:\code\Embedded_Lab\project\team02\user\ -I
#        C:\code\Embedded_Lab\project\team02\user\inc\ -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\code\Embedded_Lab\project\team02\Debug\Obj\user\main.o.d
#    Locale            =  C
#    List file         =
#        C:\code\Embedded_Lab\project\team02\Debug\List\user\main.lst
#    Object file       =
#        C:\code\Embedded_Lab\project\team02\Debug\Obj\user\main.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\code\Embedded_Lab\project\team02\user\main.c
      1          #include "lcd.h"
      2          #include "touch.h"
      3          #include "misc.h"
      4          #include "stm32f10x.h"
      5          #include "stm32f10x_adc.h"
      6          #include "stm32f10x_gpio.h"
      7          #include "stm32f10x_rcc.h"
      8          #include "stm32f10x_usart.h"
      9          
     10          /* function prototype */
     11          void RCC_Configure(void);
     12          void GPIO_Configure(void);
     13          void ADC_Configure(void);
     14          void NVIC_Configure(void);
     15          void Delay(void);
     16          

   \                                 In section .bss, align 2
     17          uint16_t Brightness = 0;
   \                     Brightness:
   \        0x0                      DS8 2
     18          
     19          //---------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     20          void RCC_Configure(void) {
   \                     RCC_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     21              // TODO: Enable the APB2 peripheral clock using the function 'RCC_APB2PeriphClockCmd'
     22              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2008             MOVS     R0,#+8
   \        0x6   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     23              RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0xF44F 0x7000      MOV      R0,#+512
   \       0x10   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     24          }
   \       0x14   0xBD01             POP      {R0,PC}
     25          

   \                                 In section .text, align 2, keep-with-next
     26          void GPIO_Configure(void) {
   \                     GPIO_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     27              GPIO_InitTypeDef GPIO_InitStructure;
     28              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     29              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0003      STRB     R0,[SP, #+3]
     30              GPIO_Init(GPIOB, &GPIO_InitStructure);
   \        0xE   0x4669             MOV      R1,SP
   \       0x10   0x....             LDR.N    R0,??DataTable5
   \       0x12   0x.... 0x....      BL       GPIO_Init
     31          }
   \       0x16   0xBD01             POP      {R0,PC}
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void ADC_Configure(void) {
   \                     ADC_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
     34              ADC_InitTypeDef ADC_InitStructure;
     35          
     36              // ADC1 Configuration
     37              ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x9000             STR      R0,[SP, #+0]
     38              ADC_InitStructure.ADC_ScanConvMode = DISABLE;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0004      STRB     R0,[SP, #+4]
     39              ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xF88D 0x0005      STRB     R0,[SP, #+5]
     40              ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \       0x14   0xF45F 0x2060      MOVS     R0,#+917504
   \       0x18   0x9002             STR      R0,[SP, #+8]
     41              ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9003             STR      R0,[SP, #+12]
     42              ADC_InitStructure.ADC_NbrOfChannel = 1;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0xF88D 0x0010      STRB     R0,[SP, #+16]
     43              ADC_Init(ADC1, &ADC_InitStructure);
   \       0x24   0x....             LDR.N    R4,??DataTable5_1
   \       0x26   0x4669             MOV      R1,SP
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       ADC_Init
     44          
     45              ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_239Cycles5);
   \       0x2E   0x2307             MOVS     R3,#+7
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x2108             MOVS     R1,#+8
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       ADC_RegularChannelConfig
     46              ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);  // interrupt enable
   \       0x3A   0x2201             MOVS     R2,#+1
   \       0x3C   0xF44F 0x7108      MOV      R1,#+544
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       ADC_ITConfig
     47              ADC_Cmd(ADC1, ENABLE);                   // ADC1 enable
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0x.... 0x....      BL       ADC_Cmd
     48              ADC_ResetCalibration(ADC1);
   \       0x4E   0x0020             MOVS     R0,R4
   \       0x50   0x.... 0x....      BL       ADC_ResetCalibration
     49          
     50              while (ADC_GetResetCalibrationStatus(ADC1))
   \                     ??ADC_Configure_0: (+1)
   \       0x54   0x0020             MOVS     R0,R4
   \       0x56   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD1FA             BNE.N    ??ADC_Configure_0
     51                  ;
     52              ADC_StartCalibration(ADC1);
   \       0x5E   0x0020             MOVS     R0,R4
   \       0x60   0x.... 0x....      BL       ADC_StartCalibration
     53              while (ADC_GetCalibrationStatus(ADC1))
   \                     ??ADC_Configure_1: (+1)
   \       0x64   0x0020             MOVS     R0,R4
   \       0x66   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD1FA             BNE.N    ??ADC_Configure_1
     54                  ;
     55              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \       0x6E   0x2101             MOVS     R1,#+1
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     56          }
   \       0x76   0xB006             ADD      SP,SP,#+24
   \       0x78   0xBD10             POP      {R4,PC}
     57          

   \                                 In section .text, align 2, keep-with-next
     58          void NVIC_Configure(void) {
   \                     NVIC_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     59              NVIC_InitTypeDef NVIC_InitStructure;
     60          
     61              NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;
   \        0x2   0x2012             MOVS     R0,#+18
   \        0x4   0xF88D 0x0000      STRB     R0,[SP, #+0]
     62              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0001      STRB     R0,[SP, #+1]
     63              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0xF88D 0x0002      STRB     R0,[SP, #+2]
     64              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0xF88D 0x0003      STRB     R0,[SP, #+3]
     65              NVIC_Init(&NVIC_InitStructure);
   \       0x1A   0x4668             MOV      R0,SP
   \       0x1C   0x.... 0x....      BL       NVIC_Init
     66          }
   \       0x20   0xBD01             POP      {R0,PC}
     67          

   \                                 In section .text, align 2, keep-with-next
     68          void ADC1_2_IRQHandler(void) {
   \                     ADC1_2_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     69              if (ADC_GetITStatus(ADC1, ADC_IT_EOC) != RESET) {
   \        0x2   0x....             LDR.N    R4,??DataTable5_1
   \        0x4   0xF44F 0x7108      MOV      R1,#+544
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       ADC_GetITStatus
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD009             BEQ.N    ??ADC1_2_IRQHandler_0
     70                  Brightness = ADC_GetConversionValue(ADC1);
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       ADC_GetConversionValue
   \       0x18   0x....             LDR.N    R1,??DataTable5_2
   \       0x1A   0x8008             STRH     R0,[R1, #+0]
     71                  //--- Clear ADC1 AWD pending interrupt bit
     72                  ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
   \       0x1C   0xF44F 0x7108      MOV      R1,#+544
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x.... 0x....      BL       ADC_ClearITPendingBit
     73              }
     74          }
   \                     ??ADC1_2_IRQHandler_0: (+1)
   \       0x26   0xBD10             POP      {R4,PC}
     75          

   \                                 In section .text, align 2, keep-with-next
     76          void Delay(void) {
     77              int i;
     78              for (i = 0; i < 2000000; i++) {
   \                     Delay: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0xE000             B.N      ??Delay_0
   \                     ??Delay_1: (+1)
   \        0x4   0x1C40             ADDS     R0,R0,#+1
   \                     ??Delay_0: (+1)
   \        0x6   0x....             LDR.N    R1,??DataTable5_3
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xDBFB             BLT.N    ??Delay_1
     79              }
     80          }
   \        0xC   0x4770             BX       LR
     81          

   \                                 In section .data, align 4
     82          int color[12] = {WHITE, CYAN, BLUE, RED, MAGENTA, LGRAY, GREEN, YELLOW, BROWN, BRRED, GRAY};
   \                     color:
   \        0x0   0x0000'FFFF        DC32 65'535, 32'767, 31, 63'488, 63'519, 50'712, 2'016, 65'504, 48'192

   \              0x0000'7FFF  

   \              0x0000'001F  

   \              0x0000'F800  

   \              0x0000'F81F  

   \              0x0000'C618  

   \              0x0000'07E0  

   \              0x0000'FFE0  

   \              0x0000'BC40
   \       0x24   0x0000'FC07        DC32 64'519, 33'840, 0

   \              0x0000'8430  

   \              0x0000'0000
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void Init(void) {
   \                     Init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     85              SystemInit();
   \        0x2   0x.... 0x....      BL       SystemInit
     86              RCC_Configure();
   \        0x6   0x.... 0x....      BL       RCC_Configure
     87              GPIO_Configure();
   \        0xA   0x.... 0x....      BL       GPIO_Configure
     88              ADC_Configure();
   \        0xE   0x.... 0x....      BL       ADC_Configure
     89              NVIC_Configure();
   \       0x12   0x.... 0x....      BL       NVIC_Configure
     90          
     91              LCD_Init();
   \       0x16   0x.... 0x....      BL       LCD_Init
     92              Touch_Configuration();
   \       0x1A   0x.... 0x....      BL       Touch_Configuration
     93          }
   \       0x1E   0xBD01             POP      {R0,PC}
     94          
     95          

   \                                 In section .text, align 2, keep-with-next
     96          int main(void) {
   \                     main: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
     97              Init();
   \        0x4   0x.... 0x....      BL       Init
     98              
     99              //Touch_Adjust();
    100              
    101              uint16_t c_x, c_y;
    102              uint16_t p_x, p_y;
    103              
    104              char* team_str = "MON_Team02";
   \        0x8   0x....             LDR.N    R4,??DataTable5_4
    105          
    106              while (1) {
    107                 
    108                  LCD_ShowString(30, 30, team_str, color[2], color[0]);  // team
                                                ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "u8 *"
   \                     ??main_0: (+1)
   \        0xA   0x....             LDR.N    R5,??DataTable5_5
   \        0xC   0x6828             LDR      R0,[R5, #+0]
   \        0xE   0xB280             UXTH     R0,R0
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0x68A8             LDR      R0,[R5, #+8]
   \       0x14   0x0003             MOVS     R3,R0
   \       0x16   0xB29B             UXTH     R3,R3
   \       0x18   0x0022             MOVS     R2,R4
   \       0x1A   0x211E             MOVS     R1,#+30
   \       0x1C   0x201E             MOVS     R0,#+30
   \       0x1E   0x.... 0x....      BL       LCD_ShowString
    109                  Touch_GetXY(&c_x, &c_y, 1);
   \       0x22   0x2201             MOVS     R2,#+1
   \       0x24   0xA903             ADD      R1,SP,#+12
   \       0x26   0xF10D 0x000E      ADD      R0,SP,#+14
   \       0x2A   0x.... 0x....      BL       Touch_GetXY
    110                  Convert_Pos(c_x, c_y, &p_x, &p_y);
   \       0x2E   0xAB02             ADD      R3,SP,#+8
   \       0x30   0xF10D 0x020A      ADD      R2,SP,#+10
   \       0x34   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \       0x38   0xF8BD 0x000E      LDRH     R0,[SP, #+14]
   \       0x3C   0x.... 0x....      BL       Convert_Pos
    111                  LCD_DrawCircle(p_x, p_y, 2);
   \       0x40   0x2202             MOVS     R2,#+2
   \       0x42   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \       0x46   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \       0x4A   0x.... 0x....      BL       LCD_DrawCircle
    112          
    113                  LCD_ShowNum(100, 50, p_x, 3, color[2], color[0]);  // cursor x
   \       0x4E   0x6828             LDR      R0,[R5, #+0]
   \       0x50   0xB280             UXTH     R0,R0
   \       0x52   0x9001             STR      R0,[SP, #+4]
   \       0x54   0x68A8             LDR      R0,[R5, #+8]
   \       0x56   0xB280             UXTH     R0,R0
   \       0x58   0x9000             STR      R0,[SP, #+0]
   \       0x5A   0x2303             MOVS     R3,#+3
   \       0x5C   0xF8BD 0x200A      LDRH     R2,[SP, #+10]
   \       0x60   0x2132             MOVS     R1,#+50
   \       0x62   0x2064             MOVS     R0,#+100
   \       0x64   0x.... 0x....      BL       LCD_ShowNum
    114                  LCD_ShowNum(100, 70, p_y, 3, color[2], color[0]);  // cursor y
   \       0x68   0x6828             LDR      R0,[R5, #+0]
   \       0x6A   0xB280             UXTH     R0,R0
   \       0x6C   0x9001             STR      R0,[SP, #+4]
   \       0x6E   0x68A8             LDR      R0,[R5, #+8]
   \       0x70   0xB280             UXTH     R0,R0
   \       0x72   0x9000             STR      R0,[SP, #+0]
   \       0x74   0x2303             MOVS     R3,#+3
   \       0x76   0xF8BD 0x2008      LDRH     R2,[SP, #+8]
   \       0x7A   0x2146             MOVS     R1,#+70
   \       0x7C   0x2064             MOVS     R0,#+100
   \       0x7E   0x.... 0x....      BL       LCD_ShowNum
    115                  LCD_ShowNum(30, 90, Brightness, 4, color[2], color[0]);     // bright sensor
   \       0x82   0x6828             LDR      R0,[R5, #+0]
   \       0x84   0xB280             UXTH     R0,R0
   \       0x86   0x9001             STR      R0,[SP, #+4]
   \       0x88   0x68A8             LDR      R0,[R5, #+8]
   \       0x8A   0xB280             UXTH     R0,R0
   \       0x8C   0x9000             STR      R0,[SP, #+0]
   \       0x8E   0x2304             MOVS     R3,#+4
   \       0x90   0x....             LDR.N    R0,??DataTable5_2
   \       0x92   0x8802             LDRH     R2,[R0, #+0]
   \       0x94   0x215A             MOVS     R1,#+90
   \       0x96   0x201E             MOVS     R0,#+30
   \       0x98   0x.... 0x....      BL       LCD_ShowNum
   \       0x9C   0xE7B5             B.N      ??main_0
    116                 
    117              }
    118          
    119              return 0;
                     ^
Warning[Pe111]: statement is unreachable
    120          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x4001'2400        DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     Brightness

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x001E'8480        DC32     0x1e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \        0x0   0x....'....        DC32     color

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x4D 0x4F          DC8 "MON_Team02"

   \              0x4E 0x5F    

   \              0x54 0x65    

   \              0x61 0x6D    

   \              0x30 0x32    

   \              0x00
   \        0xB                      DS8 1

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ADC1_2_IRQHandler
         8   -> ADC_ClearITPendingBit
         8   -> ADC_GetConversionValue
         8   -> ADC_GetITStatus
      32   ADC_Configure
        32   -> ADC_Cmd
        32   -> ADC_GetCalibrationStatus
        32   -> ADC_GetResetCalibrationStatus
        32   -> ADC_ITConfig
        32   -> ADC_Init
        32   -> ADC_RegularChannelConfig
        32   -> ADC_ResetCalibration
        32   -> ADC_SoftwareStartConvCmd
        32   -> ADC_StartCalibration
       0   Delay
       8   GPIO_Configure
         8   -> GPIO_Init
       8   Init
         8   -> ADC_Configure
         8   -> GPIO_Configure
         8   -> LCD_Init
         8   -> NVIC_Configure
         8   -> RCC_Configure
         8   -> SystemInit
         8   -> Touch_Configuration
       8   NVIC_Configure
         8   -> NVIC_Init
       8   RCC_Configure
         8   -> RCC_APB2PeriphClockCmd
      32   main
        32   -> Convert_Pos
        32   -> Init
        32   -> LCD_DrawCircle
        32   -> LCD_ShowNum
        32   -> LCD_ShowString
        32   -> Touch_GetXY


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      12  ?_0
      40  ADC1_2_IRQHandler
     122  ADC_Configure
       2  Brightness
      14  Delay
      24  GPIO_Configure
      32  Init
      34  NVIC_Configure
      22  RCC_Configure
      48  color
     158  main

 
   2 bytes in section .bss
  48 bytes in section .data
  12 bytes in section .rodata
 470 bytes in section .text
 
 470 bytes of CODE  memory
  12 bytes of CONST memory
  50 bytes of DATA  memory

Errors: none
Warnings: 2
